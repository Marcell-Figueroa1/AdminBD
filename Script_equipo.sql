CREATE DATABASE GestionTalleres;
USE GestionTalleres;

-- -- üìò Escenario 2: Plataforma de Gesti√≥n de Talleres Culturales
-- El Departamento de Cultura del municipio organiza talleres como pintura,
-- folclore, yoga o cocina. Estos talleres se imparten en centros comunitarios,
-- con monitores especializados. Las inscripciones se hacen en l√≠nea y requieren
-- validaci√≥n de cupo.

-- Roles del sistema:
-- Coordinador cultural: crea talleres y administra sedes y monitores.
-- Monitor: realiza talleres y eval√∫a a participantes.
-- Participante: persona inscrita en uno o m√°s talleres.

-- Requerimientos:
-- Registro de personas con rol: participante, monitor o coordinador.
-- Talleres: nombre, descripci√≥n, sede, d√≠as, horario, cupo, monitor responsable.
-- Inscripciones: fecha de inscripci√≥n, estado (pendiente, confirmada, rechazada), participante, taller.
-- Evaluaciones por parte del monitor: puntualidad, participaci√≥n, observaciones.
-- Sedes: nombre, direcci√≥n, capacidad.

-- Tabla TIPO DE USUARIOS
CREATE TABLE tipo_Usuario (
    id_tipo_u INT AUTO_INCREMENT PRIMARY KEY, -- Identificador √∫nico del tipo de usuario
    nombre_tipo_u VARCHAR(50) NOT NULL UNIQUE, -- Nombre del tipo de usuario (ej. Coordinador, Monitor, Participante)
    descripcion_tipo_u VARCHAR(200) NOT NULL, -- Descripci√≥n del tipo de usuario
    -- Campos de auditor√≠a
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- fecha modificaci√≥n
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);
-- Tabla de USUARIOS
CREATE TABLE usuarios (
    id_usuario INT AUTO_INCREMENT PRIMARY KEY, -- Identificador √∫nico del usuario
    nombre_usuario VARCHAR(100) NOT NULL CHECK (CHAR_LENGTH(nombre_usuario) >= 3 AND nombre REGEXP '^[A-Za-z ]+$'), -- Nombre completo del usuario
    correo_usuario VARCHAR(100) UNIQUE CHECK (correo_usuario LIKE '%@%.%'), -- Correo electr√≥nico √∫nico del usuario
    password_usuario VARCHAR(100) NOT NULL CHECK (char_length(password_usuario) >= 8), -- Contrase√±a del usuario,
    asistencia_id INT, -- Relaci√≥n a asistencia
    tipo_usuario_id INT, -- Relaci√≥n a tipo_Usuario
    -- Campos de auditor√≠a
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Fecha modificaci√≥n
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);
-- Tabla de TALLERES
CREATE TABLE talleres (
    id_taller INT AUTO_INCREMENT PRIMARY KEY, -- Identificador √∫nico del taller
    nombre_taller VARCHAR(100) NOT NULL CHECK (CHAR_LENGTH(nombre_taller) >= 3 AND nombre REGEXP '^[A-Za-z ]+$'), -- Nombre del taller
    descripcion_taller VARCHAR(200) NOT NULL CHECK (CHAR_LENGTH(descripcion_taller) >= 3), -- Descripci√≥n del taller
    sede_id INT, -- Relaci√≥n a sedes
    total_Horas TIME NOT NULL, -- Horas totales del taller
    cupo INT NOT NULL, -- Cupo m√°ximo de participantes
    monitor_id INT, -- Relaci√≥n a monitores (usuarios)
    -- Campos de auditor√≠a
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Fecha modificaci√≥n
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);
-- Tabla de INSCRIPCIONES
CREATE TABLE inscripciones (
    id_inscripcion INT AUTO_INCREMENT PRIMARY KEY, -- Identificador √∫nico de la inscripci√≥n
    fecha_inscripcion DATETIME NOT NULL, -- Fecha de inscripci√≥n
    estado ENUM('pendiente', 'confirmada', 'rechazada') NOT NULL, -- Estado de la inscripci√≥n
    participante_id INT, -- Relaci√≥n a participantes (usuarios)
    taller_id INT, -- Relaci√≥n a talleres
    -- Campos de auditor√≠a
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Fecha modificaci√≥n
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);
-- Tabla de EVALUACIONES
CREATE TABLE evaluaciones (
    id_evaluacion INT AUTO_INCREMENT PRIMARY KEY, -- Identificador √∫nico de la evaluaci√≥n
    puntualidad INT NOT NULL, -- Puntualidad del participante (1-5)
    participacion INT NOT NULL, -- Participaci√≥n del participante (1-5)
    observaciones VARCHAR(300), -- Observaciones del monitor sobre el participante
    -- Campos de auditor√≠a
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Fecha modificaci√≥n
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);

CREATE TABLE sedes(    
    id_sedes INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nombre_lugar VARCHAR(100) NOT NULL UNIQUE,
    dirrecion VARCHAR(50) NOT NULL UNIQUE,
    capacidad VARCHAR(100) NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE -- Borrado l√≥gico
);

-- tabla de calificaciones
CREATE TABLE calificaciones(
	id_calificaciones INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL UNIQUE ,
    nota VARCHAR(20) NOT NULL UNIQUE,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE, -- Borrado l√≥gico
    id_taller INT NOT NULL,
    id_usuario INT,
    id_evaluacion INT
);
-- tabla de asistencia
CREATE TABLE asistencia (
	id_asistencia  INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    asistencia boolean not null unique,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- Fecha creaci√≥n
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    created_by INT, -- Usuario que crea
    updated_by INT, -- Usuario que modifica
    deleted BOOLEAN DEFAULT FALSE,-- Borrado l√≥gico
    id_taller INT,
    id_usuario INT
);


-- Relaci√≥n entre usuarios y tipo de usuario
ALTER TABLE usuarios
ADD CONSTRAINT fk_tipo_usuario
FOREIGN KEY (tipo_usuario_id) REFERENCES tipo_Usuario(id_tipo_u); -- ‚úÖ
-- Relaci√≥n entre talleres y sedes
ALTER TABLE talleres
ADD CONSTRAINT fk_sede
FOREIGN KEY (sede_id) REFERENCES sedes(id_sedes); -- ‚úÖ
-- Relaci√≥n entre talleres y monitores
ALTER TABLE talleres
ADD CONSTRAINT fk_monitor
FOREIGN KEY (monitor_id) REFERENCES usuarios(id_usuario); -- ‚úÖ
-- Relaci√≥n entre inscripciones y participantes
ALTER TABLE inscripciones
ADD CONSTRAINT fk_participante
FOREIGN KEY (participante_id) REFERENCES usuarios(id_usuario); -- ‚úÖ
-- Relaci√≥n entre inscripciones y talleres
ALTER TABLE inscripciones
ADD CONSTRAINT fk_taller
FOREIGN KEY (taller_id) REFERENCES talleres(id_taller); -- ‚úÖ
-- relaciones de usuarios y calificaciones
ALTER TABLE calificaciones
ADD CONSTRAINT fk_calificaciones_usuarios
foreign key(id_usuario) references usuarios(id_usuario); -- ‚úÖ
-- relaciones de asistencia y usuarios
ALTER TABLE asistencia
ADD CONSTRAINT fk_asistencia_id
foreign key (id_usuario) references usuarios(id_usuario); -- ‚úÖ
-- relaciones de asistencia y talleres
ALTER TABLE asistencia
ADD CONSTRAINT fk_taller_id
foreign key (id_taller) references talleres(id_taller); -- ‚úÖ
-- relaciones de calificaciones y talleres
ALTER TABLE calificaciones
ADD CONSTRAINT fk_id_taller
FOREIGN KEY (id_taller) references talleres(id_taller); -- ‚úÖ
